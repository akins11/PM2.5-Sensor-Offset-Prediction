{"title":"Data & Exploration","markdown":{"yaml":{"title":"Data & Exploration","jupyter":"python3"},"headingText":"Introduction","containsRefs":false,"markdown":"\n\nA PM<sub>2.5</sub> sensor measures the level of fine particulate matter (pm<sub>2.5</sub>) within of a specific area by detecting the air quality, these sensors can be prone to faults due to so many reasons which can affect the quality of its signal and data. It is important to quickly detect when such device is faulty so repairs or replacement can be carried out. *NOTE*: PM<sub>2.5</sub> also called Fine particulate matter are tiny particles in the air that reduce visibility and cause the air to appear hazy when levels are elevated. (PM<sub>2.5</sub> are complex because they can be made up of numerous types of chemicals and particles and they can also be partly liquid. measured in micrograms per cubic meter. \"a microgram is a unit of weight, there are a million micrograms in a gram & a pound = 450 grams.\"   \n\nIn order to effectively detect any future defects, we will train a model that can differentiate between a working sensor and an distorted sensor. Given the avaliable sensor historical data and the avaliability of the sensor fault label (Whether the sensor has a fault or not), The approprate model to use will be a `supervised classification model`.\n\n\n### Libraries\n\n```{python}\nimport pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as mticker\nimport seaborn as sns\nfrom plotnine import *\n```\n\n\n##### Custom Functions\n\n```{python}\nimport function as cfun\n```\n\n<p> \nAll custom functions used for the analysis can be found here <a href = \"www.mysite.com\"><i class=\"bi bi-filetype-py\"></i></a>\n</p>\n\n```{python}\n#| include: false\n#| message: false\n#| warning: false\n\nimport warnings\nwarnings.filterwarnings('ignore')\n```\n\n\n\n### Data\n\n```{python}\ntrain = pd.read_csv('data/train.csv', parse_dates = ['Datetime'])\n```\n\n#### Variable Definition\n**Sensor1_PM2.5, Sensor2_PM2.5**:: These are recorded PM2.5 from Sensor 1 and Sensor 2.      \n\n**Temparature** :: This is the degree or indensity of heat present when each PM2.5 was recorded using a Celsius scale. Note that higher tempemperature leads to low air quality. Also When the weather is hot primary sources of pollutants tend to increase.    \n \n**Relative_Humidity** :: Relative humidity is the amount of water vapor in the air, expressed as a percentage of the maximum amount of water vapor the air can hold at the same temperature. A high humidity increases the rate of harmful or toxic chemicals in the air.   \n\n\n#### Data Inspection\n\n###### Data Info\n```{python}\ntrain.info()\n```\n\nThere are 297,177 records and 7 variables of airquality data in the training data set, also the non null count shows that tamperature, relative humidity and both sensors have missing values in them.\n\n\n###### Missing Values\n\n```{python}\nna_df = train.isnull().sum().to_frame().rename(columns = {0: \"Number of Missing Value\"})\nna_df[\"percentage\"] = round((na_df[\"Number of Missing Value\"] / train.shape[0])*100, 3)\nna_df\n```\nBoth PM<sub>2.5</sub> sensor have 3,614 missing values which is 1.2% of the train data set, while both tempaerature and relative humidity have 3,549 (1.2%) of missing data.\n\n\n###### Question: \nThere are similar missing number of values for both sensors and also temperature and relative humidity, so are these missing records similar in the data.\n\n```{python}\ndef related_missing_record(df, cols):\n    check_1 = df.loc[df[cols[0]].isna()].loc[df[cols[1]].notna()].shape[0]\n    check_2 = df.loc[df[cols[1]].isna()].loc[df[cols[0]].notna()].shape[0]\n    return check_1 == check_2\n\nprint(f\"Both Sensor ::\\n{related_missing_record(train, ['Sensor1_PM2.5', 'Sensor2_PM2.5'])}\\n\")\nprint(f\"Train Temperature & Relative Humidity::\\n{related_missing_record(train, ['Temperature', 'Relative_Humidity'])}\\n\")\n```\n\nLooks like there were reasons/faliure for skipping data entry during a specific period of time for both sensors. let get the minimum and maximum date for this missing record.\n\n```{python}\nfor col in [\"Sensor1_PM2.5\", \"Temperature\"]:\n    print(f\"{col} ::\\n{train.loc[train[col].isna()]['Datetime'].agg(['min', 'max'])}\\n\")\n```\n\n\n###### Outliers\n\n```{python}\n#| warning: false\n#| message: false\nsns.set_style(\"whitegrid\")\nfig, axes = plt.subplots(nrows = 2, ncols = 2, figsize = (10, 6))\nfig.suptitle('Variable Distribution', y = 0.93, fontsize = 16)\n\nfor ax, data, name in zip(axes.flatten(), train, ['Sensor1_PM2.5', 'Sensor2_PM2.5', 'Temperature', 'Relative_Humidity']):\n    sns.boxplot(train[name], ax = ax)\n    ax.set_xlabel(name)\n```\n\n\n```{python}\noutlier_cols = [\"Sensor1_PM2.5\", \"Sensor2_PM2.5\", \"Relative_Humidity\"]\n\nfor col in outlier_cols:\n    print(f\"{col} Outlier :: {cfun.get_outlier(train, col, 1.5)}\")\n    print(\"-\"*20)\n```\n\nBoth Sensors have some extrem large values that shows that there where some times when the sensors picked up dengerous level of Fine particulate matter around the area.\n\n\n###### Question:\nAre these extreme values somehow related to the periods when the pm<sub>2.5</sub> sensors where condsidered faulty.\n\n```{python}\nfor col in [\"Sensor1_PM2.5\", \"Sensor2_PM2.5\"]:\n    print(f\"{col} Outlier :: {cfun.get_outlier(train.query('Offset_fault == 0'), col, 1.5, typ='upper')}\\n\")\n    print(f\"Max {col} value :: {train.query('Offset_fault == 0')[col].max()}\\n\\n\")\n```\n\n\n```{python}\nfor col in [\"Sensor1_PM2.5\", \"Sensor2_PM2.5\"]:\n    print(f\"{col} Outlier :: {cfun.get_outlier(train.query('Offset_fault == 1'), col, 1.5, typ='upper')}\\n\")\n    print(f\"Max {col} value :: {train.query('Offset_fault == 1')[col].max()}\\n\\n\")\n```\n\nBoth occations show that the extreme values are present inspite of whether the sensor is considered faulty or not.\n\n\n```{python}\nfor col in outlier_cols:\n    print(f\"Number of Outlier in {col} is {cfun.filter_outlier(train, col, 'inner').shape[0]:,}\")\n    print(\"-\"*46)\n```\n\n\n#### Data Cleaning\nThe train data will be restructured for exploration.\n\n```{python}\ne_train = train.dropna().copy()\ne_train.shape\n```\n\n\n### Exploratory Data Analysis\n\n#### Additional Variables\nThe sensors PM<sub>2.5</sub> records are numeric, a categorical variable will be created to distinguish this records for better data exploration.\n\n```{python}\ne_train = cfun.add_pmCategory(e_train, ordinal=False)\n\nfor col in [\"S1_AQI\", \"S2_AQI\"]:\n    e_train[col] = e_train[col].astype(\"category\") \n    e_train[col] = e_train[col].cat.reorder_categories([\"Good\", \"Moderate\", \"Unhealthy (SG)\", \"Unhealthy\", \"Very Unhealthy\", \"Hazardous\"], ordered = True)\n```\n\nDefining Air Quality Index Categories:  \n1. **Good** :: Little to no risk (PM<sub>2.5</sub> from 0 - 12.0).    \n2. **Moderate** :: Unusually sensitive individuals may experience respiratory symptoms. (PM<sub>2.5</sub> from 21.1 - 35.4).  \n3. **Unhealthy** (for sensitive groups) :: Increasing likelihood of respiratory symptoms in sensitive individuals. (PM<sub>2.5</sub> from 35.5 - 55.4).    \n4. **Unhealthy** :: Increased respiratory effect in general population. (PM<sub>2.5</sub> from 55.5 - 150.4).    \n5. **Very Unhealthy** :: Significant increase in respiratory effect in general population. (PM<sub>2.5</sub> from 150.4 - 250.4).    \n6. **Hazardous** :: Serious risk of respiratory effect in general population (PM<sub>2.5</sub> from 250.4 - 500.4).  \n  \nsource: [U.S Environmental Protection Agency](https//www.epa.gov)\n\n<br>\nThe Datetime contains the timestamp of the data collection, from this variable the individual hour, month, and year will be extracted.\n\n```{python}\ne_train = cfun.get_standAlone_dates(e_train, \"Datetime\", [\"hour\", \"month\", \"year\"])\n```\n\nChanging offset fault for better readability during exploration.\n\n```{python}\ne_train[\"faulty\"] = e_train[\"Offset_fault\"].replace({0: \"No\", 1: \"Yes\"})\ne_train.head(3)\n```\n\n<br>\n\n#### Univariate Analysis\n\n```{python}\ncfun.rec_count(e_train, \"faulty\", title = \"Device Status\", typ = \"plt\")\n```\n\nThe outcome variable `offset fault`  contains only two categories which are 1/Yes for PM<sub>2.5</sub> sensor that was considered to have been sending faulty signals at the time and 0/No for sensors working well. From the bar chart above, there are less faulty sensors (36.95%) that faulty sensors (63.05%) overall.\n\n<br>\n\n```{python}\ne_train.select_dtypes(\"number\").describe().applymap(lambda x: round(x, 3))\n```\n\nIn micrograms per cubic meter the minimum value for sensors 1 and 2 falls within the range -9.45 to -9.70 respectively while that maximum value falls within the range 997.96 to 997.26 respectively which shows only a very small difference, for the average value given that there are huge presence of outliers in both sensors it will be more accurate to look at the median value where 50% for sensor 1 fall between 36.65 and lower also for sensor 2 33.85 and lower.  \n\nThere was an average temperature of  23.32 degrees overall for the train set and for relative humidity 78.61.\n\n<br>\n\n\n##### Sensor PM2.5 Distribution\n\n::: {.panel-tabset}\n\n## Sensor 1\n\n```{python}\ncfun.histPlot(e_train, \"Sensor1_PM2.5\", bins = 100, title=f\"Sensor 1 PM2.5\")\n```\n\n## Sensor 2\n\n```{python}\ncfun.histPlot(e_train, \"Sensor2_PM2.5\", bins = 100, title=f\"Sensor 2 PM2.5\")\n```\n\n:::\n\n\n\n##### Air Quality Index\n\n::: {.panel-tabset}\n\n## Sensor 1\n\n```{python}\ncfun.air_quality_count(e_train, \"S1_AQI\")\n```\n\n## Sensor 2\n\n```{python}\ncfun.air_quality_count(e_train, \"S2_AQI\")\n```\n\n:::\n\nSensor 2 Picked up more Good PM<sub>2.5</sub> signals (11.87%) than sensor 1 (8.51%), both sensors have just 0.03% of it recodes as hazadious while the highest Air quality index category recorded was moderate level with 39% and 41% respectively for sensor 1 and 2.\n\n\n##### Temperature\n\n```{python}\n\nprint(cfun.boxPlot(e_train, \"Temperature\"))\nprint(cfun.histPlot(e_train, \"Temperature\", bins=35))\n```\nGiven that the distibution is skewed, it shows that there are more low temperatures recorded then high temperatures.\n\n\n##### Relative Humidity\n\n```{python}\n\nprint(cfun.boxPlot(e_train, \"Relative_Humidity\", axis_text_suffix=\"%\"))\nprint(cfun.histPlot(e_train, \"Relative_Humidity\", bins=35, axis_text_suffix=\"%\"))\n```\n\nMore high relative humidity was recorded than low relative humidity Over the selected period.\n\n<br>\n\n##### DateTime\n\n```{python}\ne_train[\"Datetime\"].describe()\n```\nFor the train data set the we can see that the records started from the 15th of October 2021 up to the 21st of january 2022.\n\n\n###### Month\n\n```{python}\ne_train[\"Month\"].unique()\n```\n\n```{python}\ncfun.rec_count(e_train, \"Month\", rename_axis_text = [\"January\", \"October\", \"November\", \"December\"])\n```\n\n\n###### Year\n\n```{python}\ncfun.rec_count(e_train, \"Year\")\n```\n\n<br> \n\n#### Multivarite Analysis\n\n##### Device Status and Particulate Matter \n\n::: {.panel-tabset}\n\n## Sensor 1\n\n```{python}\ncfun.boxPlot(e_train,  num_var=\"Sensor1_PM2.5\", cat_var=\"faulty\",\n            color=[\"#03B4C8\", \"#EE6A50\"],\n            title=[f\"particulate matter 2.5 From Sensor 1\", \"Device Status\"])\n```\n\n## Sensor 2\n\n```{python}\ncfun.boxPlot(e_train,  num_var=\"Sensor2_PM2.5\", cat_var=\"faulty\",\n             color=[\"#03B4C8\", \"#EE6A50\"],\n             title=[f\"particulate matter 2.5 From Sensor 2\", \"Device Status\"])\n```\n\n:::\nFor both sensors there are many extreme PM<sub>2.5</sub> values recorded when no faulty signals was detected than when it was.\n\n```{python}\nsen_agg = cfun.vars_longer_summary(e_train, \n                                   select_vars = [\"faulty\", \"Sensor1_PM2.5\", \"Sensor2_PM2.5\"], \n                                   var_name = \"Sensor\", value_name = \"PM 2.5\", \n                                   replace_rec = [\"Sensor 1\", \"Sensor 2\"])\n\nsummary_fun = [\"median\", \"max\"]\nplt_title = [\"Median\", \"Maximum\"]\n\nfor sumy_fun, plt_tl in zip(summary_fun, plt_title):\n    print(cfun.facet_summary_plot2(df = sen_agg, cat_var = \"faulty\", num_var = sumy_fun, \n                                  fill = \"faulty\", facet_by = \"Sensor\", \n                                  ylab = \"PM2.5\", \n                                  title = f\"{plt_tl} Particulate Matter By Offset Fault For Each Sensor\"))\n```\n\nThe Median PM<sub>2.5</sub> for sensor 2 when no signal offset fault was detected (61.93%) is higher than that of sensor 1 (55.31%) and the reverse is the case when a fault was detected. in conclusion sensor 1 had more offset faults than sensor 2.\n\n\n##### Temperature, Relative Humidity and Device status\n\n```{python}\ntr_agg = cfun.vars_longer_summary(e_train, \n                                  select_vars = [\"faulty\", \"Temperature\", \"Relative_Humidity\"],\n                                  var_name  = \"variable\", value_name = \"value\")\n\ncfun.facet_summary_plot2(\n    df=tr_agg, cat_var=\"faulty\", num_var=\"median\", \n    fill=\"faulty\", facet_by=\"variable\", scales=\"free_y\", \n    sb_aj=0.1, title=\"Median Of Temperature & Relative Humidity By Device Status\")                                 \n```\n\n\n##### Air Quality with Temperature & Relative Humidity\n\n::: {.panel-tabset}\n## Sensor 1\n\n```{python}\naqi_tr =  cfun.vars_longer_summary(e_train, \n                                   select_vars=[\"S1_AQI\", \"Temperature\", \"Relative_Humidity\"], \n                                   var_name   =\"Variable\", \n                                   value_name =\"PM2.5\")\n\ncfun.facet_summary_plot(\n    aqi_tr, \"S1_AQI\", \"mean\", \"Variable\", \n    sb_aj=0.06, \n    title=\"Average Relative Humidity & Temperature For Sensor 1 By Air Quality Index\")\n```\n\n\n## Sensor 2\n\n```{python}\naqi_tr =  cfun.vars_longer_summary(e_train, \n                                   select_vars=[\"S2_AQI\", \"Temperature\", \"Relative_Humidity\"], \n                                   var_name   =\"Variable\", \n                                   value_name =\"PM2.5\")\n\ncfun.facet_summary_plot(\n    aqi_tr, \"S2_AQI\", \"mean\", \"Variable\", \n    sb_aj=0.06, \n    title=\"Average Relative Humidity & Temperature For Sensor 2 By Air Quality Index\"\n    )                                   \n```\n\n:::\nFor relative humidity using the above chart the higher the critical level of PM<sub>2.5</sub> the higher the relative humidity on an average with the exception of hazardous level. while for temperature the higher the critical level of PM<sub>2.5</sub> the lower the degree of temperature on an average with only the exception of hazardous level.\n\n\n\n##### Correlation\n\n```{python}\n#| cache: true\nplt.figure(figsize = (20, 6))\nnum_cols = ['Sensor1_PM2.5', 'Sensor2_PM2.5', 'Temperature', 'Relative_Humidity']\nsns.pairplot(e_train[num_cols], \n             kind=\"scatter\", \n             plot_kws=dict(s=80, edgecolor=\"white\", linewidth=2.5, color=\"#02A9EA\"))\nplt.show()\n```\n\n\n```{python}\n# Ordinal Encoding\ncorr_df = e_train.copy()\n\nfor col in [\"S1_AQI\", \"S2_AQI\"]:\n    corr_df[col] = corr_df[col].replace({\"Hazardous\"     : 0, \n                                         \"Very Unhealthy\": 1, \n                                         \"Unhealthy\"     : 2, \n                                         \"Unhealthy (SG)\": 3, \n                                         \"Moderate\"      : 4, \n                                         \"Good\"          : 5})\n    corr_df[col] = corr_df[col].astype(\"int64\")\n\ncor = corr_df.select_dtypes([\"int64\", \"float64\"]).corr()\n\nplt.figure(figsize = (10, 8))\nsns.heatmap(cor, cmap = 'RdYlBu', annot = True, center = 0)\nplt.title('Correlogram', fontsize = 15, color = 'darkgreen')\nplt.show()\n```\n\nBoth sensors 1 & 2 are highly (positive) correlated with each other.  \nAir quality index(AQI) from both sensors are negatively correlated with the PM<sub>2.5</sub> values.    \nTemperature have a positive correlation with AQI while Relative Humidity have a negative correlation with AQI."},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-yaml":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"center","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"output-file":"index.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.1.149","jupyter":"python3","theme":"zephyr","toc-title":"Table Of Content","backgroundcolor":"#FEFEFF","page-layout":"full","title":"Data & Exploration"},"extensions":{"book":{"multiFile":true}}}}}